import unittest
from commands import *
from vocab import Vocab


class CommandsTestCase(unittest.TestCase):

    def setUp(self):
        self.vocab = Vocab('src/tests/test_data/vocab_good.csv')
        self.commandStack = CommandStack()

    def test_NewCommand(self):
        self.assertEqual(self.commandStack.current(), -1)
        self.commandStack.do(AddCommand(self.vocab, 'new'))
        self.assertEqual(self.commandStack.current(), 0)
        self.assertTrue(self.vocab.contains('new'))
        message = self.commandStack.undo()
        self.assertEqual(
            message, 'newはリスト%sから削除した。' %
            self.vocab.new_kanji_list_name())
        self.assertEqual(self.commandStack.current(), -1)
        self.assertFalse(self.vocab.contains('new'))
        message = self.commandStack.redo()
        self.assertEqual(
            message, 'newはリスト%sに追加した。' %
            self.vocab.new_kanji_list_name())
        self.assertEqual(self.commandStack.current(), 0)
        self.assertTrue(self.vocab.contains('new'))
        self.commandStack.undo()
        self.assertEqual(self.commandStack.current(), -1)
        self.assertFalse(self.vocab.contains('new'))

    def test_ChangeCommand(self):
        self.assertEqual(self.commandStack.current(), -1)
        self.commandStack.do(AddCommand(self.vocab, 'new'))
        self.assertEqual(self.commandStack.current(), 0)
        self.assertTrue(self.vocab.contains('new'))
        message = self.commandStack.undo()
        self.assertEqual(
            message, 'newはリスト%sから削除した。' %
            self.vocab.new_kanji_list_name())
        self.assertEqual(self.commandStack.current(), -1)
        self.assertFalse(self.vocab.contains('new'))
        message = self.commandStack.redo()
        self.assertEqual(
            message, 'newはリスト%sに追加した。' %
            self.vocab.new_kanji_list_name())
        self.assertEqual(self.commandStack.current(), 0)
        self.assertTrue(self.vocab.contains('new'))
        self.commandStack.undo()
        self.assertEqual(self.commandStack.current(), -1)
        self.assertFalse(self.vocab.contains('new'))

    def test_DeleteCommand(self):
        self.assertEqual(self.commandStack.current(), -1)
        self.vocab.toggle_known('送る')
        self.vocab.add_kana('送る', 'new')
        list_name = self.vocab.get_list_name('送る')
        known = self.vocab.get_known('送る')
        kana = self.vocab.get_kana('送る')
        self.commandStack.do(DeleteCommand(self.vocab, '送る'))
        self.assertEqual(self.commandStack.current(), 0)
        self.assertFalse(self.vocab.contains('送る'))
        message = self.commandStack.undo()
        self.assertEqual(message, '送るはリスト0100に追加した。')
        self.assertEqual(self.commandStack.current(), -1)
        self.assertTrue(self.vocab.contains('送る'))
        self.assertEqual(self.vocab.get_list_name('送る'), list_name)
        self.assertEqual(self.vocab.get_known('送る'), known)
        self.assertEqual(self.vocab.get_kana('送る'), kana)
        message = self.commandStack.redo()
        self.assertEqual(message, '送るはリスト0100から削除した。')
        self.assertEqual(self.commandStack.current(), 0)
        self.assertFalse(self.vocab.contains('送る'))
        self.commandStack.undo()
        self.assertEqual(self.commandStack.current(), -1)
        self.assertTrue(self.vocab.contains('送る'))
        self.assertEqual(self.vocab.get_list_name('送る'), list_name)
        self.assertEqual(self.vocab.get_known('送る'), known)
        self.assertEqual(self.vocab.get_kana('送る'), kana)

    def test_undo_redo(self):
        self.assertEqual(self.commandStack.current(), -1)
        self.commandStack.do(AddCommand(self.vocab, 'new'))
        self.assertEqual(self.commandStack.current(), 0)
        self.commandStack.do(DeleteCommand(self.vocab, 'new'))
        self.assertEqual(self.commandStack.current(), 1)
        self.assertTrue(self.commandStack.undoable())
        self.assertFalse(self.commandStack.redoable())
        self.commandStack.undo()
        self.assertEqual(self.commandStack.current(), 0)
        self.assertTrue(self.commandStack.undoable())
        self.assertTrue(self.commandStack.redoable())
        self.commandStack.undo()
        self.assertEqual(self.commandStack.current(), -1)
        self.assertFalse(self.commandStack.undoable())
        self.assertTrue(self.commandStack.redoable())
        self.commandStack.redo()
        self.assertTrue(self.commandStack.undoable())
        self.assertTrue(self.commandStack.redoable())
        self.commandStack.redo()
        self.assertTrue(self.commandStack.undoable())
        self.assertFalse(self.commandStack.redoable())

    def test_NewKanaCommand(self):
        self.assertEqual(self.vocab.get_kana('送る'), ['おくる'])
        self.commandStack.do(AddKanaCommand(self.vocab, '送る', 'new'))
        self.assertTrue(self.vocab.contains('送る', 'new'))
        self.assertEqual(self.vocab.get_kana('送る'), ['おくる', 'new'])
        message = self.commandStack.undo()
        self.assertEqual(message, 'newは送るから削除した。')
        self.assertFalse(self.vocab.contains('送る', 'new'))
        self.assertEqual(self.vocab.get_kana('送る'), ['おくる'])
        message = self.commandStack.redo()
        self.assertEqual(message, 'newは送るに追加した。')
        self.assertTrue(self.vocab.contains('送る', 'new'))
        self.assertEqual(self.vocab.get_kana('送る'), ['おくる', 'new'])
        self.commandStack.undo()
        self.assertFalse(self.vocab.contains('送る', 'new'))
        self.assertEqual(self.vocab.get_kana('送る'), ['おくる'])

    def test_ChangeKanaCommand(self):
        self.assertEqual(self.commandStack.current(), -1)
        self.commandStack.do(AddCommand(self.vocab, 'new'))
        self.commandStack.do(AddKanaCommand(self.vocab, 'new', 'kana'))
        self.commandStack.do(AddKanaCommand(self.vocab, 'new', 'kana2'))
        self.assertEqual(self.commandStack.current(), 2)
        self.assertTrue(self.vocab.contains('new', 'kana'))
        self.assertTrue(self.vocab.contains('new', 'kana2'))
        self.assertFalse(self.vocab.contains('new', 'kana3'))
        self.assertEqual(['kana', 'kana2'], self.vocab.get_kana('new'))
        self.commandStack.do(ChangeKanaCommand(
            self.vocab, 'new', 'kana', 'kana3'))
        self.assertEqual(self.commandStack.current(), 3)
        self.assertFalse(self.vocab.contains('new', 'kana'))
        self.assertTrue(self.vocab.contains('new', 'kana2'))
        self.assertTrue(self.vocab.contains('new', 'kana3'))
        self.assertEqual(['kana3', 'kana2'], self.vocab.get_kana('new'))
        message = self.commandStack.undo()
        self.assertEqual(message, 'newはkana3をkanaに戻した。')
        self.assertEqual(self.commandStack.current(), 2)
        self.assertTrue(self.vocab.contains('new', 'kana'))
        self.assertTrue(self.vocab.contains('new', 'kana2'))
        self.assertFalse(self.vocab.contains('new', 'kana3'))
        message = self.commandStack.redo()
        self.assertEqual(message, 'newはkanaをkana3に変更した。')
        self.assertEqual(self.commandStack.current(), 3)
        self.assertFalse(self.vocab.contains('new', 'kana'))
        self.assertTrue(self.vocab.contains('new', 'kana2'))
        self.assertTrue(self.vocab.contains('new', 'kana3'))

    def test_DeleteKanaCommand(self):
        self.assertEqual(self.vocab.get_kana('送る'), ['おくる'])
        self.commandStack.do(AddKanaCommand(self.vocab, '送る', 'new'))
        self.assertTrue(self.vocab.contains('送る', 'new'))
        self.assertEqual(self.vocab.get_kana('送る'), ['おくる', 'new'])
        self.commandStack.do(DeleteKanaCommand(self.vocab, '送る', 'おくる'))
        self.assertEqual(self.vocab.get_kana('送る'), ['new'])
        self.commandStack.do(AddKanaCommand(self.vocab, '送る', 'new2'))
        self.assertTrue(self.vocab.contains('送る', 'new2'))
        self.assertEqual(self.vocab.get_kana('送る'), ['new', 'new2'])
        self.commandStack.do(DeleteKanaCommand(self.vocab, '送る', 'new'))
        self.assertFalse(self.vocab.contains('送る', 'new'))
        self.assertEqual(self.vocab.get_kana('送る'), ['new2'])
        message = self.commandStack.undo()
        self.assertEqual(message, 'newは送るに追加した。')
        self.assertEqual(self.vocab.get_kana('送る'), ['new', 'new2'])
        self.commandStack.undo()
        self.assertEqual(self.vocab.get_kana('送る'), ['new'])
        self.commandStack.undo()
        self.assertEqual(self.vocab.get_kana('送る'), ['おくる', 'new'])
        self.commandStack.undo()
        self.assertFalse(self.commandStack.undoable())
        message = self.commandStack.redo()
        self.assertEqual(message, 'newは送るに追加した。')
        self.assertEqual(self.vocab.get_kana('送る'), ['おくる', 'new'])
        self.commandStack.redo()
        self.assertEqual(self.vocab.get_kana('送る'), ['new'])
        self.commandStack.redo()
        self.assertEqual(self.vocab.get_kana('送る'), ['new', 'new2'])
        self.commandStack.redo()
        self.assertEqual(self.vocab.get_kana('送る'), ['new2'])
        self.assertFalse(self.commandStack.redoable())
        self.commandStack.undo()
        self.commandStack.undo()
        self.commandStack.undo()
        self.commandStack.undo()
        self.assertFalse(self.commandStack.undoable())
        self.assertEqual(self.vocab.get_kana('送る'), ['おくる'])

    def test_ToggleStatusCommand(self):
        known = self.vocab.get_known('送る')
        self.commandStack.do(ToggleKnownCommand(self.vocab, '送る'))
        self.assertEqual(self.vocab.get_known('送る'), not known)
        message = self.commandStack.undo()
        self.assertEqual(message, '送るのステータスが未知に変更された。')
        self.assertEqual(self.vocab.get_known('送る'), known)
        message = self.commandStack.redo()
        self.assertEqual(message, '送るのステータスが既知(\x1b[32m✓\x1b[0m)に変更された。')
        self.assertEqual(self.vocab.get_known('送る'), not known)
        self.commandStack.undo()
        self.assertEqual(self.vocab.get_known('送る'), known)
